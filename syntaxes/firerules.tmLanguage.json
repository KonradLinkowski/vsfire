{
   "//": "https://manual.macromates.com/en/language_grammars",
   "comment": "Firestore Rules Syntax: version 1.0",
   "scopeName": "firebase.rules",
   "fileTypes": [
     "rule"
   ],
   "firstLineMatch": "^service cloud.firestore",
   "foldingStartMarker": "^.*\\bfunction\\s*(\\w+\\s*)?\\([^\\)]*\\)(\\s*\\{[^\\}]*)?\\s*$",
   "foldingStopMarker": "^\\s*\\}",
   "name": "Bolt",
   "patterns": [
     {
       "captures": {
         "1": {
           "name": "storage.type.function.firerule"
         },
         "2": {
           "name": "entity.name.function.firerule"
         },
         "3": {
           "name": "punctuation.definition.parameters.begin.firerule"
         },
         "4": {
           "name": "variable.parameter.function.firerule"
         },
         "5": {
           "name": "punctuation.definition.parameters.end.firerule"
         }
       },
       "comment": "match regular function like: function myFunc(arg) { … }",
       "match": "\\b(function)\\s+([a-zA-Z_$]\\w*)?\\s*(\\()(.*?)(\\))",
       "name": "meta.function.firerule"
     },
     {
       "captures": {
         "1": {
           "name": "entity.name.function.firerule"
         },
         "2": {
           "name": "punctuation.definition.parameters.begin.firerule"
         },
         "3": {
           "name": "variable.parameter.function.firerule"
         },
         "4": {
           "name": "punctuation.definition.parameters.end.firerule"
         },
         "6": {
           "name": "meta.brace.curly.firerule"
         }
       },
       "comment": "match bolt function like: foo(arg) { … }",
       "match": "\\b([a-zA-Z_$]\\w*)\\s*(\\()(.*?)(\\))([\\s\\n\\r])*(\\{)",
       "name": "meta.function.firerule"
     },
     {
       "captures": {
         "1": {
           "name": "entity.name.function.firerule"
         },
         "2": {
           "name": "punctuation.definition.parameters.begin.firerule"
         },
         "3": {
           "name": "variable.parameter.function.firerule"
         },
         "4": {
           "name": "punctuation.definition.parameters.end.firerule"
         }
       },
       "comment": "match function like: myFunc(arg) = …",
       "match": "\\b([a-zA-Z_$]\\w*)?\\s*(\\()(.*?)(\\))\\s*=\\s*",
       "name": "meta.function.firerule"
     },
     {
       "match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b",
       "name": "constant.numeric.firerule"
     },
     {
       "begin": "'",
       "beginCaptures": {
         "0": {
           "name": "punctuation.definition.string.begin.firerule"
         }
       },
       "end": "'",
       "endCaptures": {
         "0": {
           "name": "punctuation.definition.string.end.firerule"
         }
       },
       "name": "string.quoted.single.firerule",
       "patterns": [
         {
           "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
           "name": "constant.character.escape.firerule"
         }
       ]
     },
     {
       "begin": "\"",
       "beginCaptures": {
         "0": {
           "name": "punctuation.definition.string.begin.firerule"
         }
       },
       "end": "\"",
       "endCaptures": {
         "0": {
           "name": "punctuation.definition.string.end.firerule"
         }
       },
       "name": "string.quoted.double.firerule",
       "patterns": [
         {
           "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
           "name": "constant.character.escape.firerule"
         }
       ]
     },
     {
       "begin": "/\\*\\*(?!/)",
       "captures": {
         "0": {
           "name": "punctuation.definition.comment.firerule"
         }
       },
       "end": "\\*/",
       "name": "comment.block.documentation.firerule"
     },
     {
       "begin": "/\\*",
       "captures": {
         "0": {
           "name": "punctuation.definition.comment.firerule"
         }
       },
       "end": "\\*/",
       "name": "comment.block.firerule"
     },
     {
       "captures": {
         "1": {
           "name": "punctuation.definition.comment.firerule"
         }
       },
       "match": "(//).*$\\n?",
       "name": "comment.line.double-slash.firerule"
     },
     {
       "match": "\\b(type|path|is|extends)\\b",
       "name": "storage.type.firerule"
     },
     {
       "match": "\\b(return)\\b",
       "name": "keyword.control.firerule"
     },
     {
       "match": "\\b(read|write|validate|create|update|delete|index)\\b",
       "name": "storage.modifier.firerule"
     },
     {
       "match": "\\b(super|this)\\b",
       "name": "variable.language.firerule"
     },
     {
       "match": "\\b(now|root|data|auth|newData|null|true|false|Infinity|NaN|undefined)\\b",
       "name": "constant.language.firerule"
     },
     {
       "match": "\\b(String|Number|Boolean|Object|Any|Null|Map)\\b",
       "name": "support.class.firerule"
     },
     {
       "match": "!|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|\\^=|\\b(in|instanceof|new|delete|typeof|void)\\b",
       "name": "keyword.operator.firerule"
     },
     {
       "match": "\\b\\$\\w\\b",
       "comment": "Match $variable",
       "name": "variable.language.firerule"
     },
     {
       "begin": "(?<=[=(:]|^|return|&&|\\|\\||!)\\s*(/)(?![/*+{}?])",
       "beginCaptures": {
         "1": {
           "name": "punctuation.definition.string.begin.firerule"
         }
       },
       "end": "(/)[igm]*",
       "endCaptures": {
         "1": {
           "name": "punctuation.definition.string.end.firerule"
         }
       },
       "name": "string.regexp.firerule",
       "patterns": [
         {
           "match": "\\\\.",
           "name": "constant.character.escape.firerule"
         }
       ]
     },
     {
       "match": "\\;",
       "name": "punctuation.terminator.statement.firerule"
     },
     {
       "match": ",[ |\\t]*",
       "name": "meta.delimiter.object.comma.firerule"
     },
     {
       "match": "\\.",
       "name": "meta.delimiter.method.period.firerule"
     },
     {
       "match": "\\{|\\}",
       "name": "meta.brace.curly.firerule"
     },
     {
       "match": "\\(|\\)",
       "name": "meta.brace.round.firerule"
     },
     {
       "match": "\\[|\\]",
       "name": "meta.brace.square.firerule"
     }
   ]
 }